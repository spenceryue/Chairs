@import "wedge";
@import "mathsass/dist/math";

/* Comfy Chair */
.comfy-chair {
  $RES: 80px;
  $SCALE: 3;
  $W: 1.0;
  $L: 1.0;
  $H: 0.3;
  $B2_h: 0.8;
  $B2_gap: 0.05;
  $B2_tilt: 30deg;
  $A_t: 0.05;
  $A_h: $H * 0.8;
  $A_theta: 20deg;
  $C_bW2: 0.2;
  $C_lip2: 0.14;
  $B1_t: 0.05;
  $B_t: 0.05;
  $B_d: 0.85;
  $L_d: 0.05;
  
  & {
    --RES: $RES;
    --SCALE: $SCALE;
    --W: $W * $RES;
    --L: $L * $RES;
    --H: $H * $RES;
  }

  &-B {
    /* shared box dimensions */
    $B_top: $L_d * 1;
    $B_base: $B_top * 0.75;
    $w: $B_top;
    $l: $B_top;
    $h: $B_t;
    $w1: $B_base;
    $l1: $B_base;
    $bW: ($w - $w1)/2;
    $bL1: ($w - $w1)/2;
    $bL2: ($w - $w1)/2;
    $sign: -1;
    $theta: atan2($bW,$h); // restriction: bW always "negative" (i.e. angles inwards)
    $phi1: atan2(-$sign*$bL1,$h);
    $phi2: atan2(-$sign*$bL2,$h);
    $hyp: sqrt($bW*$bW + $h*$h);
    $hyp1: sqrt($bL1*$bL1 + $h*$h);
    $hyp2: sqrt($bL2*$bL2 + $h*$h);
    

    /* dimensions passed to each box through CSS inheritance */
    --w: $w * $RES;
    --l: $l * $RES;
    --h: $h * $RES;
    --bW: $bW * $RES;
    --bL1: $bL1 * $RES;
    --bL2: $bL2 * $RES;
    --sign: $sign;
    --theta: $theta + rad;
    --phi1: $phi1 + rad;
    --phi2: $phi2 + rad;
    --hyp: $hyp * $RES;
    --hyp1: $hyp1 * $RES;
    --hyp2: $hyp2 * $RES;
    --w1: $w1 * $RES;
    --l1: $l1 * $RES;
    
    /* global positioning */
    transform-style: preserve-3d;
    width: $B_d * $RES;
    height: $B_d * $RES;
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%,-50%) rotate(45deg);

    // border-radius: 50%;
    // background-color: rgba(0,0,0,.5);

    /* positioning each box */
    $ratio: ($B_d/2 - ($l1 + $l)/2) / $h;
    @for $i from 0 to 4 {
      > *:nth-child(#{$i + 1}) {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate3d(-50%,-50%,$h*$RES) rotateX(180deg) rotate($i*90deg) matrix3d(1,0,0,0, 0,1,0,0, 0,-$ratio,1,0, 0,0,0,1) translate(0,-$l/2*$RES);
      }
    }

    /* implement border-type() mixin */
    @if ($sign == 1) {
      @include border-type(top);
    } @else { // $sign == -1
      @include border-type(bottom);
    }

    /* for debugging mode: clip text overflow */
    .w-face {
      overflow:hidden !important;
    }
  }

  &-L {
    /* shared box dimensions */
    $w: $L_d;
    $l: cos(30deg) * $L_d/2;
    $h: $H - $B1_t - $B_t;
    $bW: sin(30deg) * $L_d/2;
    $hyp: sqrt($bW*$bW + $l*$l);
    $theta: atan2($bW,$l);

    /* dimensions passed to each box through CSS inheritance */
    --w: $w * $RES;
    --l: $l * $RES;
    --h: $h * $RES;
    --bW: $bW * $RES;
    --hyp: $hyp * $RES;
    --theta: $theta + rad;

    /* global positioning */
    transform-style: preserve-3d;
    width: $L_d * $RES;
    height: $L_d * $RES;
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate3d(-50%,-50%,$B_t*$RES);

    /* positioning each box */
    > *:nth-child(1) {
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%,0) rotate(180deg);
    }
    > *:nth-child(2) {
      position: absolute;
      left: 50%;
      top: 0;
      transform: translate(-50%,0);
    }

    .t-face {
      overflow:hidden !important;
    }
  }

  &-B1 {
    $w: $W;
    $l: $B1_t;
    $h: $L;
    $bW: 0.05;
    $hyp: sqrt($bW*$bW + $l*$l);
    $theta: atan2($bW,$l);

    --w: $w * $RES;
    --l: $l * $RES;
    --h: $h * $RES;
    --bW: $bW * $RES;
    --hyp: $hyp * $RES;
    --theta: $theta + rad;

    transform-style: preserve-3d;
    width: $w * $RES;
    height: $l * $RES;
    position: absolute;
    left: 50%;
    top: 50%;
    transform-origin: 50% 50% $h/2*$RES;
    transform: translate3d(-50%,-50%,($H - $h/2 - $l/2)*$RES) rotateX(-90deg) rotate(180deg);

    .t-face {
      overflow:hidden !important;
    }
  }

  &-C {
    /* shared box dimensions */
    $C_bW1: 0.05;
    $C_lip1: 0.08;
    $C_t: 0.05;
    $C_w: $W - 2*$A_t + $A_t/5;
    $C_l: $L - $B2_gap + $C_lip1/5 ;
    $C_h: $C_t;
    
    /* shared dimensions passed to each box through CSS inheritance */
    
    
    /* global positioning */
    transform-style: preserve-3d;
    width: $C_w * $RES;
    height: $C_l * $RES;
    position: absolute;
    left: 50%;
    top: $B2_gap*$RES;
    transform: translate3d(-50%,0,$H*$RES);

    /* positioning each box */
    > *:nth-child(1) {
      $w: $C_w;
      $l: $C_t;
      $h: $C_lip1;
      $bW: $C_bW1;
      $bL1: 0.5 * $l;
      $bL2: 0.1 * $l;
      $sign: -1;
      $theta: atan2($bW,$h);
      $phi1: atan2($bL1,$h);
      $phi2: atan2($bL2,$h);
      $hyp: sqrt($bW*$bW + $h*$h);
      $hyp1: sqrt($bL1*$bL1 + $h*$h);
      $hyp2: sqrt($bL2*$bL2 + $h*$h);
      $w1: $w - 2*$bW;
      $l1: $l + $sign*($bL1 + $bL2);
      
      --w: $w * $RES;
      --l: $l * $RES;
      --h: $h * $RES;
      --bW: $bW * $RES;
      --bL1: $bL1 * $RES;
      --bL2: $bL2 * $RES;
      --sign: $sign;
      --theta: $theta + rad;
      --phi1: $phi1 + rad;
      --phi2: $phi2 + rad;
      --hyp: $hyp * $RES;
      --hyp1: $hyp1 * $RES;
      --hyp2: $hyp2 * $RES;
      --w1: $w1 * $RES;
      --l1: $l1 * $RES;

      position: absolute;
      left: 50%;
      top: 0;
      transform: translate(-50%,0) translate3d(0,($C_l - $C_lip1 - $l/2)*$RES,$l/2*$RES) rotateX(-90deg) rotate(180deg);

      @include border-type(bottom);
    }
    > *:nth-child(2) {
      $w: $C_w;
      $l: $C_l - $C_lip1 - $C_lip2;
      $h: $C_h;
      --w: $w * $RES;
      --l: $l * $RES;
      --h: $h * $RES;
      position: absolute;
      left: 50%;
      top: 0;
      transform: translate(-50%,$C_lip2*$RES);
    }
    > *:nth-child(3) {
      $w: $C_w;
      $l: $C_lip2;
      $h: $C_h;
      $bW: $C_bW2;
      $hyp: sqrt($C_bW2*$C_bW2 + $C_lip2*$C_lip2);
      $theta: atan2($C_bW2,$C_lip2);
      --w: $w * $RES;
      --l: $l * $RES;
      --h: $h * $RES;
      --bW: $bW * $RES;
      --hyp: $hyp * $RES;
      --theta: $theta + rad;
      position: absolute;
      left: 50%;
      top: 0;
      transform: translate(-50%,0);
    }

    .t-face {
      overflow:hidden !important;
    }
  }

  &-A1, &-A2 {
    /* shared box dimensions */
    $A_w: $L - $B2_gap;
    $A_l: $A_t;
    
    /* shared dimensions passed to each box through CSS inheritance */
    
    /* global positioning */
    transform-style: preserve-3d;
    width: $A_w * $RES;
    height: $A_l * $RES;
    position: absolute;
    left: 0;
    top: 0;
    transform: translate3d(-50%,-50%,$H*$RES) rotate(-90deg) translate(-($B2_gap + $A_w*0.5)*$RES,$A_l*0.5*$RES);

    /* positioning each box */
    > *:nth-child(1) {
      $hyp: $A_t;
      $bW: $hyp * sin($A_theta);
      $w: $A_h / cos($A_theta);
      $l: $hyp * cos($A_theta);
      $h: $A_w;
      --w: $w * $RES;
      --l: $l * $RES;
      --h: $h * $RES;
      --bW: $bW * $RES;
      --hyp: $hyp * $RES;
      --theta: $A_theta;
      position: absolute;
      left: 50%;
      top: 50%;
      transform-origin: 50% 100% $h/2*$RES;
      transform: translate3d(-50%,-50%,-$h/2*$RES) rotateY(-90deg) rotate(-$A_theta) translate($w/2*$RES,0);
    }
    > *:nth-child(2) {
      $w: $A_w;
      $l: 0.2;
      $h: $A_t;
      $bW: 0.2 * $L;
      $hyp: sqrt($bW*$bW + $l*$l);
      $theta: atan2($bW,$l);
      --w: $w * $RES;
      --l: $l * $RES;
      --h: $h * $RES;
      --bW: $bW * $RES;
      --hyp: $hyp * $RES;
      --theta: $theta + rad;
      position: absolute;
      left: 50%;
      top: 100%;
      transform-origin: 50% 100% $h/2*$RES;
      transform: translate3d(-50%,-100%,-$h/2*$RES) rotateX(-90deg + $A_theta) translate(0,-$A_h/cos($A_theta)*$RES) rotateX($A_theta) translateZ(-$h/2*$RES);
    }

    .t-face {
      overflow:hidden !important;
    }
  }

  &-A2 {
    $A_w: $L - $B2_gap;
    $A_l: $A_t;
    left: 0;
    top: 0;
    transform: translate3d(-50%,-50%,$H*$RES) rotate(90deg) translate(($B2_gap + $A_w*0.5)*$RES,-($W - $A_l/2)*$RES) scale(-1,1);
  }

  &-B2 {
    /* shared box dimensions */
    $B2_w: $W;
    $B2_l: $B2_gap;
    $B2_h: $B2_h;
    $theta1: $A_theta;
    $hyp1: $A_h / cos($theta1);
    $bW: $hyp1 * sin($theta1);
    $theta2: atan2($bW, $B2_h - $A_h) + rad;
    $hyp2: sqrt($bW*$bW + pow($B2_h - $A_h,2));
    $ratio: tan($B2_tilt);

    /* global positioning */
    transform-style: preserve-3d;
    width: $B2_w * $RES;
    height: $B2_l * $RES;
    position: absolute;
    left: 50%;
    top: 0;
    transform: translate3d(-50%,0,$H*$RES) matrix3d(1,0,0,0, 0,1,0,0, 0,-$ratio,1,0, 0,0,0,1);

    /* positioning each box */
    > *:nth-child(1) {
      $w: $B2_w + 2*$bW;
      $l: $A_h;
      $h: $B2_l;
      
      --w: $w * $RES;
      --l: $l * $RES;
      --h: $h * $RES;
      --bW: $bW * $RES;
      --hyp: $hyp1 * $RES;
      --theta: $theta1;
      
      position: absolute;
      transform-origin: 50% 50% $h/2*$RES;
      transform: translate3d(-50%,-50%,-$h/2*$RES) rotateX(-90deg) rotate(180deg) translate3d(-$B2_w/2*$RES,$l/2*$RES,$h/2*$RES);
    }
    > *:nth-child(2) {
      $w: $B2_w + 2*$bW;
      $l: $B2_h - $A_h;
      $h: $B2_l;

      --w: $w * $RES;
      --l: $l * $RES;
      --h: $h * $RES;
      --bW: $bW * $RES;
      --hyp: $hyp2 * $RES;
      --theta: $theta2;

      position: absolute;
      transform-origin: 50% 50% $h/2*$RES;
      transform: translate3d(-50%,-50%,-$h/2*$RES) rotateX(-90deg) translate3d($B2_w/2*$RES,-($l*0.5 + $A_h)*$RES,$h/2*$RES);
    }

    .t-face {
      overflow:hidden !important;
    }
  }

  &-J1, &-J2 {
    $w: $A_t;
    $l: 0;
    $h: $A_h;
    $bW: 0;
    $bL1: 0;
    $bL2: $A_h * tan($B2_tilt);
    $sign: 1;
    $theta: atan2($bW,$h);
    $phi1: atan2(-$sign*$bL1,$h);
    $phi2: -$sign*$B2_tilt;
    $hyp: $h;
    $hyp1: $h;
    $hyp2: sqrt(pow($h,2) + pow($bL2,2));
    $w1: $w - 2*$bW;
    $l1: $l + $sign*($bL1 + $bL2);

    --w: $w * $RES;
    --l: $l * $RES;
    --h: $h * $RES;
    --bW: $bW * $RES;
    --bL1: $bL1 * $RES;
    --bL2: $bL2 * $RES;
    --sign: $sign;
    --theta: $theta + rad;
    --phi1: $phi1 + rad;
    --phi2: $phi2;
    --hyp: $hyp * $RES;
    --hyp1: $hyp1 * $RES;
    --hyp2: $hyp2 * $RES;
    --w1: $w1 * $RES;
    --l1: $l1 * $RES;

    $ratio: tan($A_theta);
    transform-style: preserve-3d;
    width: $w * $RES;
    height: $l * $RES;
    position: absolute;
    transform: translate3d(0,$B2_gap*$RES,$H*$RES) matrix3d(1,0,0,0, 0,1,0,0, -$ratio,0,1,0, 0,0,0,1);

    .w-face {
      overflow:hidden !important;
    }

    @include border-type(top);
  }

  &-J2 {
    $ratio: tan($A_theta);
    right:0;
    transform: translate3d(0,$B2_gap*$RES,$H*$RES) scaleX(-1) matrix3d(1,0,0,0, 0,1,0,0, -$ratio,0,1,0, 0,0,0,1);
  }

  &-F1, &-F2 {
    $w: $A_h;
    $l: 0;
    $h: $C_lip2;
    $bW: 0;
    $bL1: 0;
    $bL2: $C_bW2;
    $sign: 1;
      $theta: atan2($bW,$h);
      $phi1: atan2(-$sign*$bL1,$h);
      $phi2: atan2(-$sign*$bL2,$h);
      $hyp: sqrt(pow($h,2) + pow($bW,2));
      $hyp1: sqrt(pow($h,2) + pow($bL1,2));
      $hyp2: sqrt(pow($h,2) + pow($bL2,2));
      $w1: $w - 2*$bW;
      $l1: $l + $sign*($bL1 + $bL2);

    --w: $w * $RES;
    --l: $l * $RES;
    --h: $h * $RES;
    --bW: $bW * $RES;
    --bL1: $bL1 * $RES;
    --bL2: $bL2 * $RES;
    --sign: $sign;
    --theta: $theta + rad;
    --phi1: $phi1 + rad;
    --phi2: $phi2 + rad;
    --hyp: $hyp * $RES;
    --hyp1: $hyp1 * $RES;
    --hyp2: $hyp2 * $RES;
    --w1: $w1 * $RES;
    --l1: $l1 * $RES;

    $ratioZ: tan($B2_tilt);
    $ratioY: tan($A_theta);
    transform-style: preserve-3d;
    width: $w * $RES;
    height: $l * $RES;
    position: absolute;
    transform-origin: 0% 0%;
    transform: translate3d($A_t*$RES,$B2_gap*$RES,$H*$RES) rotate(90deg) rotateY(-90deg) translateZ(-$h*$RES) matrix3d(1,$ratioY,$ratioZ,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);

    .w-face {
      overflow:hidden;
    }

    @include border-type(top);
  }

  &-F2 {
    $h: $C_lip2;
    $ratioZ: tan($B2_tilt);
    $ratioY: tan($A_theta);
    right:0;
    transform-origin: 100% 0%;
    transform: translate3d(-$A_t*$RES,$B2_gap*$RES,$H*$RES) rotate(-90deg) rotateY(90deg) translateZ(-$h*$RES) matrix3d(1,-$ratioY,-$ratioZ,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
  }

  &-U1, &-U2 {
    $w: ($B2_h - $A_h)*$SQRT2;
    $l: $A_t + $C_bW2;
    $h: $w/2;
    $bW: 0.5*$w;
    $bL1: 0;
    $bL2: $C_bW2;
    $sign: -1;
      $theta: atan2($bW,$h);
      $phi1: atan2(-$sign*$bL1,$h);
      $phi2: atan2(-$sign*$bL2,$h);
      $hyp: sqrt(pow($h,2) + pow($bW,2));
      $hyp1: sqrt(pow($h,2) + pow($bL1,2));
      $hyp2: sqrt(pow($h,2) + pow($bL2,2));
      $w1: $w - 2*$bW;
      $l1: $l + $sign*($bL1 + $bL2);

    --w: $w * $RES;
    --l: $l * $RES;
    --h: $h * $RES;
    --bW: $bW * $RES;
    --bL1: $bL1 * $RES;
    --bL2: $bL2 * $RES;
    --sign: $sign;
    --theta: $theta + rad;
    --phi1: $phi1 + rad;
    --phi2: $phi2 + rad;
    --hyp: $hyp * $RES;
    --hyp1: $hyp1 * $RES;
    --hyp2: $hyp2 * $RES;
    --w1: $w1 * $RES;
    --l1: $l1 * $RES;

    $ratioZ: 1+tan($B2_tilt);
    $ratioY: -$A_h*tan($A_theta) / ($B2_h - $A_h);
    $S_sqrt2: $A_h*tan($B2_tilt) / $SQRT2;
    transform-style: preserve-3d;
    width: $w * $RES;
    height: $l * $RES;
    position: absolute;
    transform-origin: 0% 100%;
    transform: translate3d(-$A_h*sin($A_theta)*$RES,(-$l + $B2_gap)*$RES,($A_h + $H)*$RES) rotate(90deg) rotateY(-90deg) translate3d(0,0,$A_h*tan($B2_tilt)*$RES) scale3d(1,1,-1) rotateY(-45deg) matrix3d(1,0,0,0, 0,1,0,0, -($w/2 - $S_sqrt2)/$h,0,$S_sqrt2/$h,0, 0,0,0,1) rotateY(45deg) matrix3d(1,$ratioY,-$ratioZ/$S_sqrt2*$h,0, 0,1,0,0, 0,0,1,0, 0,0,0,1) rotateY(-45deg);
    
    .w-face {
      overflow:hidden;
    }

    @include border-type(bottom);
  }

  &-U2 {
        $w: ($B2_h - $A_h)*$SQRT2;
    $l: $A_t + $C_bW2;
    $h: $w/2;
    $bW: 0.5*$w;
    $bL1: 0;
    $bL2: $C_bW2;
    $sign: -1;
      $theta: atan2($bW,$h);
      $phi1: atan2(-$sign*$bL1,$h);
      $phi2: atan2(-$sign*$bL2,$h);
      $hyp: sqrt(pow($h,2) + pow($bW,2));
      $hyp1: sqrt(pow($h,2) + pow($bL1,2));
      $hyp2: sqrt(pow($h,2) + pow($bL2,2));
      $w1: $w - 2*$bW;
      $l1: $l + $sign*($bL1 + $bL2);
    $ratioZ: 1+tan($B2_tilt);
    $ratioY: -$A_h*tan($A_theta) / ($B2_h - $A_h);
    $S_sqrt2: $A_h*tan($B2_tilt) / $SQRT2;
    transform: translate($W*$RES,0) scaleX(-1) translate3d(-$A_h*sin($A_theta)*$RES,(-$l + $B2_gap)*$RES,($A_h + $H)*$RES) rotate(90deg) rotateY(-90deg) translate3d(0,0,$A_h*tan($B2_tilt)*$RES) scale3d(1,1,-1) rotateY(-45deg) matrix3d(1,0,0,0, 0,1,0,0, -($w/2 - $S_sqrt2)/$h,0,$S_sqrt2/$h,0, 0,0,0,1) rotateY(45deg) matrix3d(1,$ratioY,-$ratioZ/$S_sqrt2*$h,0, 0,1,0,0, 0,0,1,0, 0,0,0,1) rotateY(-45deg);
  }
}
